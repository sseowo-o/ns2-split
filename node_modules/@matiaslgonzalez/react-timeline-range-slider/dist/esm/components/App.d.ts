import React from 'react';
import { DisabledInterval, UpdateCallbackData } from '../types';
interface TimeRangeProps {
    /** Number of steps on the timeline (the default value is 30 minutes) */
    ticksNumber?: number;
    /** Selected interval inside the timeline */
    selectedInterval?: [Date, Date];
    /** Interval to display */
    timelineInterval?: [Date, Date];
    /** Array of disabled intervals inside the timeline */
    disabledIntervals?: DisabledInterval[];
    /** ClassName of the wrapping container */
    containerClassName?: string;
    sliderRailClassName?: string;
    /** Number of milliseconds between steps (the default value is 30 minutes) */
    step?: number;
    /** Function that determines the format in which the date will be displayed */
    formatTick?: (ms: number) => string;
    /** Is the selected interval is not valid */
    error?: boolean;
    /** The interaction mode. Value of 1 will allow handles to cross each other.
     * Value of 2 will keep the sliders from crossing and separated by a step.
     * Value of 3 will make the handles pushable and keep them a step apart.
     * ADVANCED: You can also supply a function that will be passed the current
     * values and the incoming update. Your function should return what the state
     * should be set as. */
    mode?: number;
    onChangeCallback: (formattedNewTime: [Date, Date]) => void;
    onUpdateCallback: (data: UpdateCallbackData) => void;
    /**
     * Set this variable to true if you want to show a line on the timeline that represents the current time.
     */
    showNow: boolean;
}
declare class TimeRange extends React.Component<TimeRangeProps> {
    static defaultProps: Partial<TimeRangeProps>;
    get disabledIntervals(): {
        id: string;
        source: {
            id: string;
            percent: number;
            value: number;
        };
        target: {
            id: string;
            percent: number;
            value: number;
        };
        color: string | undefined;
    }[] | null;
    get now(): {
        id: string;
        source: {
            id: string;
            percent: number;
            value: number;
        };
        target: {
            id: string;
            percent: number;
            value: number;
        };
    };
    onChange: (newTime: ReadonlyArray<number>) => void;
    checkIsSelectedIntervalNotValid: ([start, end]: [number, number], source: {
        value: number;
    }, target: {
        value: number;
    }) => boolean;
    onUpdate: (newTime: ReadonlyArray<number>) => void;
    getDateTicks: () => number[];
    render(): JSX.Element;
}
export default TimeRange;
