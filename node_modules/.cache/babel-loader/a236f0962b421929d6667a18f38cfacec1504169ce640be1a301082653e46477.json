{"ast":null,"code":"import { set } from 'date-fns';\nconst now = new Date();\nconst getTodayAtSpecificHour = function () {\n  let hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n  return set(now, {\n    hours: hour,\n    minutes: 0,\n    seconds: 0,\n    milliseconds: 0\n  });\n};\nconst onChange = newTime => {\n  const formattedNewTime = newTime.map(t => new Date(t));\n  if (props.onChangeCallback) {\n    props.onChangeCallback([formattedNewTime[0], formattedNewTime[1], formattedNewTime[2]]);\n  }\n};\nconst onUpdate = newTime => {\n  const {\n    onUpdateCallback\n  } = props;\n  if (!onUpdateCallback) {\n    return;\n  }\n  const formattedNewTime = newTime.map(t => new Date(t));\n  onUpdateCallback({\n    error: false,\n    time: formattedNewTime\n  });\n};\nexport const selectedInterval = [getTodayAtSpecificHour(3), getTodayAtSpecificHour(6), getTodayAtSpecificHour(9)];\nexport const timelineInterval = [getTodayAtSpecificHour(1), getTodayAtSpecificHour(24)];\nexport const initialPoints = [getTodayAtSpecificHour(5), getTodayAtSpecificHour(14)];","map":{"version":3,"names":["set","now","Date","getTodayAtSpecificHour","hour","arguments","length","undefined","hours","minutes","seconds","milliseconds","onChange","newTime","formattedNewTime","map","t","props","onChangeCallback","onUpdate","onUpdateCallback","error","time","selectedInterval","timelineInterval","initialPoints"],"sources":["/Users/seowoo/Desktop/neo_test/wifiapp 복사본/src/views/Split/datesSource.tsx"],"sourcesContent":["import { set } from 'date-fns';\nimport { useState } from 'react';\n\nconst now = new Date();\n\nconst getTodayAtSpecificHour = (hour = 12) =>\n  set(now, { hours: hour, minutes: 0, seconds: 0, milliseconds: 0 });\n\nconst onChange = (newTime: ReadonlyArray<number>) => {\n  const formattedNewTime = newTime.map((t) => new Date(t));\n  if (props.onChangeCallback) {\n    props.onChangeCallback([\n      formattedNewTime[0],\n      formattedNewTime[1],\n      formattedNewTime[2],\n    ]);\n  }\n};\n\nconst onUpdate = (newTime: ReadonlyArray<number>) => {\n  const { onUpdateCallback } = props;\n\n  if (!onUpdateCallback) {\n    return;\n  }\n\n  const formattedNewTime = newTime.map((t) => new Date(t));\n  onUpdateCallback({ error: false, time: formattedNewTime });\n};\n\nexport const selectedInterval: [Date, Date, Date] = [\n  getTodayAtSpecificHour(3),\n  getTodayAtSpecificHour(6),\n  getTodayAtSpecificHour(9),\n];\n\nexport const timelineInterval: [Date, Date] = [\n  getTodayAtSpecificHour(1),\n  getTodayAtSpecificHour(24),\n];\n\nexport const initialPoints: [Date, Date] = [\n  getTodayAtSpecificHour(5),\n  getTodayAtSpecificHour(14),\n];\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,UAAU;AAG9B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;AAEtB,MAAMC,sBAAsB,GAAG,SAAAA,CAAA;EAAA,IAACC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OACvCL,GAAG,CAACC,GAAG,EAAE;IAAEO,KAAK,EAAEJ,IAAI;IAAEK,OAAO,EAAE,CAAC;IAAEC,OAAO,EAAE,CAAC;IAAEC,YAAY,EAAE;EAAE,CAAC,CAAC;AAAA;AAEpE,MAAMC,QAAQ,GAAIC,OAA8B,IAAK;EACnD,MAAMC,gBAAgB,GAAGD,OAAO,CAACE,GAAG,CAAEC,CAAC,IAAK,IAAId,IAAI,CAACc,CAAC,CAAC,CAAC;EACxD,IAAIC,KAAK,CAACC,gBAAgB,EAAE;IAC1BD,KAAK,CAACC,gBAAgB,CAAC,CACrBJ,gBAAgB,CAAC,CAAC,CAAC,EACnBA,gBAAgB,CAAC,CAAC,CAAC,EACnBA,gBAAgB,CAAC,CAAC,CAAC,CACpB,CAAC;EACJ;AACF,CAAC;AAED,MAAMK,QAAQ,GAAIN,OAA8B,IAAK;EACnD,MAAM;IAAEO;EAAiB,CAAC,GAAGH,KAAK;EAElC,IAAI,CAACG,gBAAgB,EAAE;IACrB;EACF;EAEA,MAAMN,gBAAgB,GAAGD,OAAO,CAACE,GAAG,CAAEC,CAAC,IAAK,IAAId,IAAI,CAACc,CAAC,CAAC,CAAC;EACxDI,gBAAgB,CAAC;IAAEC,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAER;EAAiB,CAAC,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMS,gBAAoC,GAAG,CAClDpB,sBAAsB,CAAC,CAAC,CAAC,EACzBA,sBAAsB,CAAC,CAAC,CAAC,EACzBA,sBAAsB,CAAC,CAAC,CAAC,CAC1B;AAED,OAAO,MAAMqB,gBAA8B,GAAG,CAC5CrB,sBAAsB,CAAC,CAAC,CAAC,EACzBA,sBAAsB,CAAC,EAAE,CAAC,CAC3B;AAED,OAAO,MAAMsB,aAA2B,GAAG,CACzCtB,sBAAsB,CAAC,CAAC,CAAC,EACzBA,sBAAsB,CAAC,EAAE,CAAC,CAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}