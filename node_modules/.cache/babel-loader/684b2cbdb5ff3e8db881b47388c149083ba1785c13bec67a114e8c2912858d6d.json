{"ast":null,"code":"var _jsxFileName = \"/Users/seowoo/Desktop/neo_test/wifiapp/src/views/LogIn/LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Form, Title, FormRow, CheckBox, Button } from './LoginFormStyle';\nimport { EncryptStorage } from 'encrypt-storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const encryptStorage = new EncryptStorage('SECRET_KEY');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [formData, setFormData] = useState({\n    user: '',\n    password: ''\n  });\n  const handleChange = ev => {\n    setFormData({\n      ...formData,\n      [ev.target.name]: ev.target.value\n    });\n  };\n  const handleCheck = () => {\n    if (rememberMe) {\n      encryptStorage.removeItem('loginCredentials');\n    }\n    setRememberMe(rememberMe => !rememberMe);\n  };\n  const handleSubmit = ev => {\n    if (rememberMe) {\n      encryptStorage.setItem('loginCredentials', JSON.stringify(formData));\n    }\n  };\n  useEffect(() => {\n    const storedData = encryptStorage.getItem('loginCredentials');\n    if (storedData) {\n      setRememberMe(true);\n      setFormData(storedData);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(FormRow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormRow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormRow, {\n        bottomSpace: 40,\n        children: /*#__PURE__*/_jsxDEV(CheckBox, {\n          id: \"rememberMe\",\n          type: \"checkbox\",\n          onChange: handleCheck,\n          checked: rememberMe\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        value: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(LoginForm, \"K/CZbe7p8JgIuoXydrxTD9Xyo/k=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useEffect","useState","Form","Title","FormRow","CheckBox","Button","EncryptStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginForm","_s","encryptStorage","rememberMe","setRememberMe","formData","setFormData","user","password","handleChange","ev","target","name","value","handleCheck","removeItem","handleSubmit","setItem","JSON","stringify","storedData","getItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","action","bottomSpace","id","type","onChange","checked","_c","$RefreshReg$"],"sources":["/Users/seowoo/Desktop/neo_test/wifiapp/src/views/LogIn/LoginForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Title,\n  FormRow,\n  Input,\n  CheckBox,\n  Button,\n} from './LoginFormStyle';\nimport { EncryptStorage } from 'encrypt-storage';\n\ninterface Credentials {\n  user: string;\n  password: string;\n}\n\nconst LoginForm = () => {\n  const encryptStorage = new EncryptStorage('SECRET_KEY');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [formData, setFormData] = useState<Credentials>({\n    user: '',\n    password: '',\n  });\n\n  const handleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [ev.target.name]: ev.target.value,\n    });\n  };\n  const handleCheck = () => {\n    if (rememberMe) {\n      encryptStorage.removeItem('loginCredentials');\n    }\n    setRememberMe((rememberMe) => !rememberMe);\n  };\n  const handleSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    if (rememberMe) {\n      encryptStorage.setItem('loginCredentials', JSON.stringify(formData));\n    }\n  };\n\n  useEffect(() => {\n    const storedData = encryptStorage.getItem('loginCredentials');\n    if (storedData) {\n      setRememberMe(true);\n      setFormData(storedData);\n    }\n  }, []);\n\n  return (\n    <>\n      <Title>Login</Title>\n      <Form onSubmit={handleSubmit} action=\"\">\n        <FormRow>\n          {/*           <Input\n            placeholder=\"Username\"\n            onChange={handleChange}\n            name=\"user\"\n            value={formData.user}\n          /> */}\n        </FormRow>\n        <FormRow>\n          {/*           <Input\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={handleChange}\n            name=\"password\"\n            value={formData.password}\n          /> */}\n        </FormRow>\n        <FormRow bottomSpace={40}>\n          <CheckBox\n            id=\"rememberMe\"\n            type=\"checkbox\"\n            onChange={handleCheck}\n            checked={rememberMe}\n          />\n          {/* <label htmlFor='rememberMe'>Remember me</label> */}\n        </FormRow>\n        <Button type=\"submit\" value=\"Login\" />\n      </Form>\n    </>\n  );\n};\nexport default LoginForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}