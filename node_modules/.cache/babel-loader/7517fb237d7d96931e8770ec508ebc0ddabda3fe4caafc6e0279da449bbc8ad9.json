{"ast":null,"code":"var _jsxFileName = \"/Users/seowoo/Desktop/neo_test/wifiapp/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Route, Routes, useLocation } from 'react-router-dom';\nimport * as ROUTES from './routes';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // const [theme, settheme] = useState(neolabTheme.theme0_kr);\n  const isMobileDevice = true;\n  const location = useLocation();\n  console.log(location);\n  const {\n    userStore,\n    pageStore,\n    noteStore,\n    strokeStore,\n    audioStore\n  } = useStores();\n  const extra = userStore.userExtraData;\n  const [theme, setTheme] = useState(extra.theme); // 테마\n\n  const connectLiveRoom = async () => {\n    const ndp = NDP.instance;\n    const {\n      relay\n    } = ndp;\n    const rooms = await relay.getRoom();\n    if (rooms) {\n      var _rooms$resultElements;\n      const existed = rooms === null || rooms === void 0 ? void 0 : (_rooms$resultElements = rooms.resultElements) === null || _rooms$resultElements === void 0 ? void 0 : _rooms$resultElements.filter(e => e.ownerId === userStore.userData.id);\n      if (existed.length) {\n        relay.setRoom(existed[0]);\n      } else {\n        const room = await relay.createRoom();\n        if (room.entranceUrl) {\n          relay.setRoom(room);\n        } else {\n          console.error('Create Room Failed. Please check the server status.');\n          return;\n        }\n      }\n      await relay.connectRoom();\n      await relay.relayWS.join();\n      NDP.instance.relay.relayWS.on('UPLOAD_END', listenUploadEnd);\n    }\n  };\n  useEffect(() => {\n    NDPSyncController.getInstance();\n    PenManager.getInstance();\n    DatabaseController.getInstance();\n\n    // const ti = getThumbManager(); //여기서 init 해주지 않으면 ready가 pending이어서 진행되지 않음\n  }, []);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n  useEffect(() => {\n    async function getUserStrokes() {\n      // const asyncIterableStroke = NDP.instance.inkStore.getStrokeByStrokeIter(0);\n      // for await (const pages of asyncIterableStroke) {\n      //   NDPSyncController.instance.updateInkStoreage(pages);\n      // }\n    }\n    async function getNoteList() {\n      await noteStore.loadLocalNoteList();\n      await pageStore.loadLocalPages();\n      strokeStore.setStrokeLoading(LoadingStateEnum.SUCCESS);\n    }\n    if (userStore.userData) {\n      getNoteList();\n      getUserStrokes();\n      connectLiveRoom();\n      audioStore.getRecordedPageList();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userStore.userData]);\n\n  // 사용자 테마 세팅\n  useEffect(() => {\n    if (userStore.userExtraData) {\n      const {\n        theme\n      } = userStore.userExtraData;\n      setTheme(theme);\n    }\n  }, [userStore.userExtraData]);\n  const listenUploadEnd = async res => {\n    var _pages$length;\n    const lastUploadTime = await getInkManager().getLastSyncUploadTime();\n    const pages = await NDP.instance.inkStore.getStrokeByUpload(lastUploadTime, res.createdDate + 1000 // 업로드되는데 시간이 걸려서 1000ms 더해줘야함\n    );\n\n    const ln = (_pages$length = pages === null || pages === void 0 ? void 0 : pages.length) !== null && _pages$length !== void 0 ? _pages$length : 0;\n    if (ln) {\n      /**\n       * dummy 페이지이고, digital이 아닌 경우에만 해당\n       *\n       * 1. noteUUID가 PageStore와 NoteStore 있는경우\n       *    - pageUUID만 바꿔주면 된다\n       * 2. noteUUID도 새로 받은 상황\n       *    - noteStore에 가서 noteId도 바꿔주고, pageStore에서 noteId, pageId 바꿔줘야 함\n       */\n\n      let needToBeReplaced = false;\n      let dummyNoteId = '';\n      let dummyPageId = '';\n      let dummySobp = {};\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const page of pages) {\n        const targetNote = noteStore.noteList.find(e => e.id === page.noteUUID);\n        if (targetNote) {\n          const targetPage = pageStore.allPageList[targetNote.id].find(e => e.id === page.pageUUID);\n          if (targetPage) {\n            //페이지도 있다? 그럼 할 거 없음\n            break;\n          } else {\n            //노트는 있는데 페이지는 없는 경우\n            //더미로 들어가있다는 뜻. PageStore에서 sobp랑 dummy로 찾아\n            const dummyPage = pageStore.allPageList[targetNote.id].find(e => {\n              if (e.section === page.section && e.owner === page.owner && e.bookCode === page.bookCode && e.dummy) {\n                return true;\n              }\n              return false;\n            });\n            if (dummyPage !== undefined) {\n              dummyPageId = dummyPage.id;\n              dummyPage.dummy = false;\n              dummyPage.id = page.pageUUID;\n              dummyPage.noteId = page.noteUUID;\n            }\n            needToBeReplaced = true;\n            dummySobp = {\n              section: dummyPage.section,\n              owner: dummyPage.owner,\n              book: dummyPage.bookCode,\n              page: dummyPage.pageNumber,\n              pageUuid: dummyPageId,\n              noteUuid: targetNote.id\n            };\n          }\n        } else {\n          //노트도 처음 생성하는 경우. 현재는 더미 노트로 존재\n          const dummyNote = noteStore.noteList.find(e => {\n            if (e.section === page.section && e.owner === page.owner && e.bookCode === page.bookCode && e.dummy) {\n              return true;\n            }\n            return false;\n          });\n          if (dummyNote !== undefined) {\n            dummyNoteId = dummyNote.id;\n            dummyNote.dummy = false;\n            pageStore.allPageList[page.noteUUID] = [];\n            pageStore.allPageList[page.noteUUID] = pageStore.allPageList[dummyNote.id];\n            delete pageStore.allPageList[dummyNote.id];\n            dummyNote.id = page.noteUUID;\n          }\n          const dummyPage = pageStore.allPageList[page.noteUUID].find(e => {\n            if (e.section === page.section && e.owner === page.owner && e.bookCode === page.bookCode && e.dummy) {\n              return true;\n            }\n            return false;\n          });\n          if (dummyPage !== undefined) {\n            dummyPageId = dummyPage.id;\n            dummyPage.dummy = false;\n            dummyPage.id = page.pageUUID;\n            dummyPage.noteId = page.noteUUID;\n          }\n          needToBeReplaced = true;\n          dummySobp = {\n            section: dummyPage.section,\n            owner: dummyPage.owner,\n            book: dummyPage.bookCode,\n            page: dummyPage.pageNumber,\n            pageUuid: dummyPageId,\n            noteUuid: dummyNoteId\n          };\n        }\n        const dummySobpId = makeNPageIdStrWithUuid(dummySobp);\n        const strokesOnDummyPage = CachedInkStorage.instance.completedOnPage.get(dummySobpId);\n        if (strokesOnDummyPage.arr.array) {\n          for (const stroke of strokesOnDummyPage.arr.array) {\n            stroke.pageUuid = page.pageUUID;\n            stroke.noteUuid = page.noteUUID;\n          }\n          const realSobpId = makeNPageIdStrWithUuid({\n            section: page.section,\n            owner: page.owner,\n            book: page.bookCode,\n            page: page.pageNumber,\n            pageUuid: page.pageUUID,\n            noteUuid: page.noteUUID\n          });\n          CachedInkStorage.instance.completedOnPage.set(realSobpId, strokesOnDummyPage);\n          CachedInkStorage.instance.completedOnPage.delete(dummySobpId);\n        }\n      }\n      const thumbManager = getThumbManager();\n      for (let i = 0; i < ln; i++) {\n        const pr = thumbManager.invalidateIfNeeded({\n          noteId: pages[i].noteUUID,\n          pageId: pages[i].pageUUID,\n          strokeLastUploadTime: res.createdDate,\n          doNotNotify: false,\n          force: true,\n          needToBeReplaced\n        });\n        await pr;\n      }\n    }\n  };\n  const saveStroke = event => {\n    // const { stroke } = event;\n    // stroke.pageUuid = pageStore.currentPage.id;\n    // stroke.noteUuid = pageStore.currentPage.noteId;\n    // DatabaseController.instance.saveStroke(stroke);\n  };\n  const handleCompletedDot = event => {\n    const {\n      stroke\n    } = event;\n    stroke.pageUuid = pageStore.currentPage.id;\n    stroke.noteUuid = pageStore.currentPage.noteId;\n\n    //live는 dot로 보내니까 여기서 중복으로 보내면 안됨\n    if (!event.isLive) {\n      NDPSyncController.instance.handleCompletedDot(event);\n    }\n  };\n  useEffect(() => {});\n  return (\n    /*#__PURE__*/\n    // 임시조치\n    _jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signIn\",\n        element: /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: NDP_LOGIN_CALLBACK_PATH,\n        element: /*#__PURE__*/_jsxDEV(UserAuthReactElement, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        element: /*#__PURE__*/_jsxDEV(PrivateRoute, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 23\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          element: /*#__PURE__*/_jsxDEV(DefaultLayout, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 25\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_TIMELINE,\n            element: /*#__PURE__*/_jsxDEV(TimeLine, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_NOTE_LIST,\n            element: /*#__PURE__*/_jsxDEV(NoteList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_PAGE_LIST,\n            element: /*#__PURE__*/_jsxDEV(PageList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_TAG,\n            element: /*#__PURE__*/_jsxDEV(Tag, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_FAVORITE,\n            element: /*#__PURE__*/_jsxDEV(Favorite, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_RECORD,\n            element: /*#__PURE__*/_jsxDEV(Record, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ROUTES.MAIN_SETTING,\n            element: /*#__PURE__*/_jsxDEV(Setting, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: ROUTES.MAIN_PAGE_DETAIL,\n          element: /*#__PURE__*/_jsxDEV(PageDetail, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 56\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(App, \"tQ573iVwpNiq5E9jxw5KqBCPrTY=\", true, function () {\n  return [useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Route","Routes","useLocation","ROUTES","jsxDEV","_jsxDEV","App","_s","isMobileDevice","location","console","log","userStore","pageStore","noteStore","strokeStore","audioStore","useStores","extra","userExtraData","theme","setTheme","connectLiveRoom","ndp","NDP","instance","relay","rooms","getRoom","_rooms$resultElements","existed","resultElements","filter","e","ownerId","userData","id","length","setRoom","room","createRoom","entranceUrl","error","connectRoom","relayWS","join","on","listenUploadEnd","NDPSyncController","getInstance","PenManager","DatabaseController","window","scrollTo","getUserStrokes","getNoteList","loadLocalNoteList","loadLocalPages","setStrokeLoading","LoadingStateEnum","SUCCESS","getRecordedPageList","res","_pages$length","lastUploadTime","getInkManager","getLastSyncUploadTime","pages","inkStore","getStrokeByUpload","createdDate","ln","needToBeReplaced","dummyNoteId","dummyPageId","dummySobp","page","targetNote","noteList","find","noteUUID","targetPage","allPageList","pageUUID","dummyPage","section","owner","bookCode","dummy","undefined","noteId","book","pageNumber","pageUuid","noteUuid","dummyNote","dummySobpId","makeNPageIdStrWithUuid","strokesOnDummyPage","CachedInkStorage","completedOnPage","get","arr","array","stroke","realSobpId","set","delete","thumbManager","getThumbManager","i","pr","invalidateIfNeeded","pageId","strokeLastUploadTime","doNotNotify","force","saveStroke","event","handleCompletedDot","currentPage","isLive","children","path","element","SignIn","fileName","_jsxFileName","lineNumber","columnNumber","NDP_LOGIN_CALLBACK_PATH","UserAuthReactElement","PrivateRoute","DefaultLayout","Home","MAIN_TIMELINE","TimeLine","MAIN_NOTE_LIST","NoteList","MAIN_PAGE_LIST","PageList","MAIN_TAG","Tag","MAIN_FAVORITE","Favorite","MAIN_RECORD","Record","MAIN_SETTING","Setting","MAIN_PAGE_DETAIL","PageDetail","_c","$RefreshReg$"],"sources":["/Users/seowoo/Desktop/neo_test/wifiapp/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route, Routes, useLocation } from 'react-router-dom';\nimport * as ROUTES from './routes';\n\nimport Login from './views/LogIn/LoginForm';\n\nimport './App.css';\n\nconst App = () => {\n  // const [theme, settheme] = useState(neolabTheme.theme0_kr);\n  const isMobileDevice = true;\n  const location = useLocation();\n  console.log(location);\n\n  const { userStore, pageStore, noteStore, strokeStore, audioStore } =\n    useStores();\n  const extra = userStore.userExtraData;\n  const [theme, setTheme] = useState(extra.theme); // 테마\n\n  const connectLiveRoom = async () => {\n    const ndp = NDP.instance;\n    const { relay } = ndp;\n\n    const rooms = await relay.getRoom();\n\n    if (rooms) {\n      const existed = rooms?.resultElements?.filter(\n        (e) => e.ownerId === userStore.userData.id,\n      );\n\n      if (existed.length) {\n        relay.setRoom(existed[0]);\n      } else {\n        const room = await relay.createRoom();\n        if (room.entranceUrl) {\n          relay.setRoom(room);\n        } else {\n          console.error('Create Room Failed. Please check the server status.');\n          return;\n        }\n      }\n      await relay.connectRoom();\n\n      await relay.relayWS.join();\n\n      NDP.instance.relay.relayWS.on('UPLOAD_END', listenUploadEnd);\n    }\n  };\n\n  useEffect(() => {\n    NDPSyncController.getInstance();\n    PenManager.getInstance();\n    DatabaseController.getInstance();\n\n    // const ti = getThumbManager(); //여기서 init 해주지 않으면 ready가 pending이어서 진행되지 않음\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  useEffect(() => {\n    async function getUserStrokes() {\n      // const asyncIterableStroke = NDP.instance.inkStore.getStrokeByStrokeIter(0);\n      // for await (const pages of asyncIterableStroke) {\n      //   NDPSyncController.instance.updateInkStoreage(pages);\n      // }\n    }\n\n    async function getNoteList() {\n      await noteStore.loadLocalNoteList();\n      await pageStore.loadLocalPages();\n      strokeStore.setStrokeLoading(LoadingStateEnum.SUCCESS);\n    }\n\n    if (userStore.userData) {\n      getNoteList();\n      getUserStrokes();\n      connectLiveRoom();\n      audioStore.getRecordedPageList();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userStore.userData]);\n\n  // 사용자 테마 세팅\n  useEffect(() => {\n    if (userStore.userExtraData) {\n      const { theme } = userStore.userExtraData;\n      setTheme(theme);\n    }\n  }, [userStore.userExtraData]);\n\n  const listenUploadEnd = async (res) => {\n    const lastUploadTime = await getInkManager().getLastSyncUploadTime();\n    const pages = (await NDP.instance.inkStore.getStrokeByUpload(\n      lastUploadTime,\n      res.createdDate + 1000, // 업로드되는데 시간이 걸려서 1000ms 더해줘야함\n    )) as NDPInkStorePage[];\n    const ln = pages?.length ?? 0;\n\n    if (ln) {\n      /**\n       * dummy 페이지이고, digital이 아닌 경우에만 해당\n       *\n       * 1. noteUUID가 PageStore와 NoteStore 있는경우\n       *    - pageUUID만 바꿔주면 된다\n       * 2. noteUUID도 새로 받은 상황\n       *    - noteStore에 가서 noteId도 바꿔주고, pageStore에서 noteId, pageId 바꿔줘야 함\n       */\n\n      let needToBeReplaced = false;\n      let dummyNoteId = '';\n      let dummyPageId = '';\n      let dummySobp: any = {};\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const page of pages) {\n        const targetNote = noteStore.noteList.find(\n          (e) => e.id === page.noteUUID,\n        );\n\n        if (targetNote) {\n          const targetPage = pageStore.allPageList[targetNote.id].find(\n            (e) => e.id === page.pageUUID,\n          );\n\n          if (targetPage) {\n            //페이지도 있다? 그럼 할 거 없음\n            break;\n          } else {\n            //노트는 있는데 페이지는 없는 경우\n            //더미로 들어가있다는 뜻. PageStore에서 sobp랑 dummy로 찾아\n            const dummyPage = pageStore.allPageList[targetNote.id].find((e) => {\n              if (\n                e.section === page.section &&\n                e.owner === page.owner &&\n                e.bookCode === page.bookCode &&\n                e.dummy\n              ) {\n                return true;\n              }\n              return false;\n            });\n\n            if (dummyPage !== undefined) {\n              dummyPageId = dummyPage.id;\n              dummyPage.dummy = false;\n              dummyPage.id = page.pageUUID;\n              dummyPage.noteId = page.noteUUID;\n            }\n\n            needToBeReplaced = true;\n\n            dummySobp = {\n              section: dummyPage.section,\n              owner: dummyPage.owner,\n              book: dummyPage.bookCode,\n              page: dummyPage.pageNumber,\n              pageUuid: dummyPageId,\n              noteUuid: targetNote.id,\n            };\n          }\n        } else {\n          //노트도 처음 생성하는 경우. 현재는 더미 노트로 존재\n          const dummyNote = noteStore.noteList.find((e) => {\n            if (\n              e.section === page.section &&\n              e.owner === page.owner &&\n              e.bookCode === page.bookCode &&\n              e.dummy\n            ) {\n              return true;\n            }\n            return false;\n          });\n\n          if (dummyNote !== undefined) {\n            dummyNoteId = dummyNote.id;\n            dummyNote.dummy = false;\n\n            pageStore.allPageList[page.noteUUID] = [];\n            pageStore.allPageList[page.noteUUID] =\n              pageStore.allPageList[dummyNote.id];\n\n            delete pageStore.allPageList[dummyNote.id];\n\n            dummyNote.id = page.noteUUID;\n          }\n\n          const dummyPage = pageStore.allPageList[page.noteUUID].find((e) => {\n            if (\n              e.section === page.section &&\n              e.owner === page.owner &&\n              e.bookCode === page.bookCode &&\n              e.dummy\n            ) {\n              return true;\n            }\n            return false;\n          });\n\n          if (dummyPage !== undefined) {\n            dummyPageId = dummyPage.id;\n            dummyPage.dummy = false;\n            dummyPage.id = page.pageUUID;\n            dummyPage.noteId = page.noteUUID;\n          }\n\n          needToBeReplaced = true;\n          dummySobp = {\n            section: dummyPage.section,\n            owner: dummyPage.owner,\n            book: dummyPage.bookCode,\n            page: dummyPage.pageNumber,\n            pageUuid: dummyPageId,\n            noteUuid: dummyNoteId,\n          };\n        }\n\n        const dummySobpId = makeNPageIdStrWithUuid(dummySobp);\n        const strokesOnDummyPage =\n          CachedInkStorage.instance.completedOnPage.get(dummySobpId);\n        if (strokesOnDummyPage.arr.array) {\n          for (const stroke of strokesOnDummyPage.arr.array) {\n            stroke.pageUuid = page.pageUUID;\n            stroke.noteUuid = page.noteUUID;\n          }\n\n          const realSobpId = makeNPageIdStrWithUuid({\n            section: page.section,\n            owner: page.owner,\n            book: page.bookCode,\n            page: page.pageNumber,\n            pageUuid: page.pageUUID,\n            noteUuid: page.noteUUID,\n          });\n\n          CachedInkStorage.instance.completedOnPage.set(\n            realSobpId,\n            strokesOnDummyPage,\n          );\n          CachedInkStorage.instance.completedOnPage.delete(dummySobpId);\n        }\n      }\n\n      const thumbManager = getThumbManager();\n      for (let i = 0; i < ln; i++) {\n        const pr = thumbManager.invalidateIfNeeded({\n          noteId: pages[i].noteUUID,\n          pageId: pages[i].pageUUID,\n          strokeLastUploadTime: res.createdDate,\n          doNotNotify: false,\n          force: true,\n          needToBeReplaced,\n        });\n        await pr;\n      }\n    }\n  };\n\n  const saveStroke = (event) => {\n    // const { stroke } = event;\n    // stroke.pageUuid = pageStore.currentPage.id;\n    // stroke.noteUuid = pageStore.currentPage.noteId;\n    // DatabaseController.instance.saveStroke(stroke);\n  };\n\n  const handleCompletedDot = (event) => {\n    const { stroke } = event;\n    stroke.pageUuid = pageStore.currentPage.id;\n    stroke.noteUuid = pageStore.currentPage.noteId;\n\n    //live는 dot로 보내니까 여기서 중복으로 보내면 안됨\n    if (!event.isLive) {\n      NDPSyncController.instance.handleCompletedDot(event);\n    }\n  };\n\n  useEffect(() => {});\n  return (\n    // 임시조치\n\n    <Routes>\n      {/* Public route */}\n      <Route path=\"/signIn\" element={<SignIn />} />\n      <Route\n        path={NDP_LOGIN_CALLBACK_PATH}\n        element={<UserAuthReactElement />}\n      />\n      <Route path=\"*\" element={<SignIn />} />\n\n      {/* Private route */}\n      <Route element={<PrivateRoute />}>\n        <Route element={<DefaultLayout />}>\n          <Route path=\"/\" element={<Home />} />\n          <Route path={ROUTES.MAIN_TIMELINE} element={<TimeLine />} />\n          <Route path={ROUTES.MAIN_NOTE_LIST} element={<NoteList />} />\n          <Route path={ROUTES.MAIN_PAGE_LIST} element={<PageList />} />\n          <Route path={ROUTES.MAIN_TAG} element={<Tag />} />\n          <Route path={ROUTES.MAIN_FAVORITE} element={<Favorite />} />\n          <Route path={ROUTES.MAIN_RECORD} element={<Record />} />\n          <Route path={ROUTES.MAIN_SETTING} element={<Setting />} />\n        </Route>\n        <Route path={ROUTES.MAIN_PAGE_DETAIL} element={<PageDetail />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}