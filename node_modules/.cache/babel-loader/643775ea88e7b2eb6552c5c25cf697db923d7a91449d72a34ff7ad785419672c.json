{"ast":null,"code":"var _jsxFileName = \"/Users/seowoo/Desktop/neo_test/wifiapp/src/stories/ButtonBase.stories.tsx\",\n  _Default$parameters,\n  _Default$parameters2,\n  _Default$parameters2$,\n  _Primary$parameters,\n  _Primary$parameters2,\n  _Primary$parameters2$,\n  _Ghost$parameters,\n  _Ghost$parameters2,\n  _Ghost$parameters2$do;\nimport React from 'react';\nimport Button from './ButtonBase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default {\n  title: 'Button',\n  component: Button\n};\nconst meta = {\n  title: 'Button',\n  component: Button,\n  tags: ['autodocs']\n};\nconst Template = args => /*#__PURE__*/_jsxDEV(Button, {\n  ...args\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 46\n}, this);\n_c = Template;\nexport const Default = Template.bind({});\nDefault.args = {\n  buttonType: 'default',\n  isFull: false,\n  children: '버튼'\n};\nexport const Primary = Template.bind({});\nPrimary.args = {\n  buttonType: 'primary',\n  isFull: false,\n  children: '버튼'\n};\nexport const Ghost = Template.bind({});\nGhost.args = {\n  buttonType: 'ghost',\n  isFull: false,\n  children: '버튼'\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...((_Default$parameters = Default.parameters) === null || _Default$parameters === void 0 ? void 0 : _Default$parameters.docs),\n    source: {\n      originalSource: \"args => <Button {...args} />\",\n      ...((_Default$parameters2 = Default.parameters) === null || _Default$parameters2 === void 0 ? void 0 : (_Default$parameters2$ = _Default$parameters2.docs) === null || _Default$parameters2$ === void 0 ? void 0 : _Default$parameters2$.source)\n    }\n  }\n};\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...((_Primary$parameters = Primary.parameters) === null || _Primary$parameters === void 0 ? void 0 : _Primary$parameters.docs),\n    source: {\n      originalSource: \"args => <Button {...args} />\",\n      ...((_Primary$parameters2 = Primary.parameters) === null || _Primary$parameters2 === void 0 ? void 0 : (_Primary$parameters2$ = _Primary$parameters2.docs) === null || _Primary$parameters2$ === void 0 ? void 0 : _Primary$parameters2$.source)\n    }\n  }\n};\nGhost.parameters = {\n  ...Ghost.parameters,\n  docs: {\n    ...((_Ghost$parameters = Ghost.parameters) === null || _Ghost$parameters === void 0 ? void 0 : _Ghost$parameters.docs),\n    source: {\n      originalSource: \"args => <Button {...args} />\",\n      ...((_Ghost$parameters2 = Ghost.parameters) === null || _Ghost$parameters2 === void 0 ? void 0 : (_Ghost$parameters2$do = _Ghost$parameters2.docs) === null || _Ghost$parameters2$do === void 0 ? void 0 : _Ghost$parameters2$do.source)\n    }\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Template\");\nexport const __namedExportsOrder = [\"Default\", \"Primary\", \"Ghost\"];","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React from 'react';\nimport { Meta, Story } from '@storybook/react';\nimport Button, { ButtonProps } from './ButtonBase';\nexport default {\n  title: 'Button',\n  component: Button\n};\nconst meta = ({\n  title: 'Button',\n  component: Button,\n  tags: ['autodocs']\n} satisfies Meta<typeof Button>);\nconst Template: Story<ButtonProps> = args => <Button {...args} />;\nexport const Default = Template.bind({});\nDefault.args = {\n  buttonType: 'default',\n  isFull: false,\n  children: '버튼'\n};\nexport const Primary = Template.bind({});\nPrimary.args = {\n  buttonType: 'primary',\n  isFull: false,\n  children: '버튼'\n};\nexport const Ghost = Template.bind({});\nGhost.args = {\n  buttonType: 'ghost',\n  isFull: false,\n  children: '버튼'\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"args => <Button {...args} />\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: \"args => <Button {...args} />\",\n      ...Primary.parameters?.docs?.source\n    }\n  }\n};\nGhost.parameters = {\n  ...Ghost.parameters,\n  docs: {\n    ...Ghost.parameters?.docs,\n    source: {\n      originalSource: \"args => <Button {...args} />\",\n      ...Ghost.parameters?.docs?.source\n    }\n  }\n};"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}